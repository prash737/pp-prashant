risma:query COMMIT
prisma:error 
Invalid `prisma.studentProfile.findUnique()` invocation:

{
  where: {
    id: "c2b57ac7-cd91-46d6-abb4-7c936c64308c"
  },
  include: {
    profile: {
      include: {
        userInterests: {
          include: {
            interest: {
              include: {
                category: true
              }
            }
          }
        },
        userSkills: {
          include: {
            skill: {
              include: {
                category: true
              }
            }
          }
        },
        socialLinks: true,
        goals: {
          orderBy: {
            createdAt: "desc"
          }
        },
        userAchievements: {
        ~~~~~~~~~~~~~~~~
          include: {
            achievementType: {
              include: {
                category: true
              }
            }
          },
          orderBy: {
            dateOfAchievement: "desc"
          }
        },
?       student?: true,
?       mentor?: true,
?       institution?: true,
?       posts?: true,
?       userLanguages?: true,
?       userHobbies?: true,
?       careerGoals?: true,
?       moodBoard?: true,
?       customBadges?: true,
?       sentConnections?: true,
?       receivedConnections?: true,
?       connections1?: true,
?       connections2?: true,
?       givenEndorsements?: true,
?       receivedEndorsements?: true,
?       createdCircles?: true,
?       circleMemberships?: true,
?       sentCircleInvitations?: true,
?       receivedCircleInvitations?: true,
?       achievements?: true,
?       parent?: true
      }
    },
    educationHistory: {
      include: {
        institutionType: {
          include: {
            category: true
          }
        }
      },
      orderBy: {
        startDate: "desc"
      }
    }
  }
}

Unknown field `userAchievements` for include statement on model `Profile`. Available options are listed in green.
file:///home/runner/workspace/node_modules/.pnpm/@prisma+client@6.8.2_prisma@6.8.2_typescript@5.0.2__typescript@5.0.2/node_modules/@prisma/client/runtime/library.js: Invalid source map. Only conformant source maps can be used to find the original code. Cause: TypeError [ERR_INVALID_ARG_TYPE]: The "payload" argument must be of type object. Received null
file:///home/runner/workspace/node_modules/.pnpm/@prisma+client@6.8.2_prisma@6.8.2_typescript@5.0.2__typescript@5.0.2/node_modules/@prisma/client/runtime/library.js: Invalid source map. Only conformant source maps can be used to find the original code. Cause: TypeError [ERR_INVALID_ARG_TYPE]: The "payload" argument must be of type object. Received null
file:///home/runner/workspace/node_modules/.pnpm/@prisma+client@6.8.2_prisma@6.8.2_typescript@5.0.2__typescript@5.0.2/node_modules/@prisma/client/runtime/library.js: Invalid source map. Only conformant source maps can be used to find the original code. Cause: TypeError [ERR_INVALID_ARG_TYPE]: The "payload" argument must be of type object. Received null
file:///home/runner/workspace/node_modules/.pnpm/@prisma+client@6.8.2_prisma@6.8.2_typescript@5.0.2__typescript@5.0.2/node_modules/@prisma/client/runtime/library.js: Invalid source map. Only conformant source maps can be used to find the original code. Cause: TypeError [ERR_INVALID_ARG_TYPE]: The "payload" argument must be of type object. Received null
file:///home/runner/workspace/node_modules/.pnpm/@prisma+client@6.8.2_prisma@6.8.2_typescript@5.0.2__typescript@5.0.2/node_modules/@prisma/client/runtime/library.js: Invalid source map. Only conformant source maps can be used to find the original code. Cause: TypeError [ERR_INVALID_ARG_TYPE]: The "payload" argument must be of type object. Received null
Error fetching child profile: Error [PrismaClientValidationError]: 
Invalid `prisma.studentProfile.findUnique()` invocation:

{
  where: {
    id: "c2b57ac7-cd91-46d6-abb4-7c936c64308c"
  },
  include: {
    profile: {
      include: {
        userInterests: {
          include: {
            interest: {
              include: {
                category: true
              }
            }
          }
        },
        userSkills: {
          include: {
            skill: {
              include: {
                category: true
              }
            }
          }
        },
        socialLinks: true,
        goals: {
          orderBy: {
            createdAt: "desc"
          }
        },
        userAchievements: {
        ~~~~~~~~~~~~~~~~
          include: {
            achievementType: {
              include: {
                category: true
              }
            }
          },
          orderBy: {
            dateOfAchievement: "desc"
          }
        },
?       student?: true,
?       mentor?: true,
?       institution?: true,
?       posts?: true,
?       userLanguages?: true,
?       userHobbies?: true,
?       careerGoals?: true,
?       moodBoard?: true,
?       customBadges?: true,
?       sentConnections?: true,
?       receivedConnections?: true,
?       connections1?: true,
?       connections2?: true,
?       givenEndorsements?: true,
?       receivedEndorsements?: true,
?       createdCircles?: true,
?       circleMemberships?: true,
?       sentCircleInvitations?: true,
?       receivedCircleInvitations?: true,
?       achievements?: true,
?       parent?: true
      }
    },
    educationHistory: {
      include: {
        institutionType: {
          include: {
            category: true
          }
        }
      },
      orderBy: {
        startDate: "desc"
      }
    }
  }
}

Unknown field `userAchievements` for include statement on model `Profile`. Available options are listed in green.
    at async GET (app/api/parent/child-profile/[id]/route.ts:60:25)
  58 |
  59 |     // Fetch complete child profile data using service role key
> 60 |     const childProfile = await prisma.studentProfile.findUnique({
     |                         ^
  61 |       where: { id: childId },
  62 |       include: {
  63 |         profile: { {
  clientVersion: '6.8.2'
}
 GET /api/parent/child-profile/c2b57ac7-cd91-46d6-abb4-7c936c64308c 500 in 3788ms
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."profiles"."id", "public"."profiles"."role"::text, "public"."profiles"."first_name", "public"."profiles"."last_name", "public"."profiles"."bio", "public"."profiles"."location", "public"."profiles"."profile_image_url", "public"."profiles"."tagline", "public"."profiles"."professional_summary", "public"."profiles"."verification_status", "public"."profiles"."email", "public"."profiles"."phone", "public"."profiles"."cover_image_url", "public"."profiles"."theme_preference", "public"."profiles"."timezone", "public"."profiles"."availability_status", "public"."profiles"."last_active_date", "public"."profiles"."profile_views", "public"."profiles"."created_at", "public"."profiles"."updated_at", "public"."profiles"."parent_id", "public"."profiles"."parent_verified" FROM "public"."profiles" WHERE ("public"."profiles"."id" = $1 AND "public"."profiles"."parent_id" = $2 AND "public"."profiles"."role" = CAST($3::text AS "public"."user_role")) LIMIT $4 OFFSET $5
prisma:query COMMIT
prisma:query BEGIN
prisma:query DEALLOCATE ALL
prisma:query SELECT "public"."parent_profile"."id", "public"."parent_profile"."name" FROM "public"."parent_profile" WHERE ("public"."parent_profile"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3
prisma:query COMMIT
prisma:error 
Invalid `prisma.studentProfile.findUnique()` invocation:

{
  where: {
    id: "c2b57ac7-cd91-46d6-abb4-7c936c64308c"
  },
  include: {
    profile: {
      include: {
        userInterests: {
          include: {
            interest: {
              include: {
                category: true
              }
            }
          }
        },
        userSkills: {
          include: {
            skill: {
              include: {
                category: true
              }
            }
          }
        },
        socialLinks: true,
        goals: {
          orderBy: {
            createdAt: "desc"
          }
        },
        userAchievements: {
        ~~~~~~~~~~~~~~~~
          include: {
            achievementType: {
              include: {
                category: true
              }
            }
          },
          orderBy: {
            dateOfAchievement: "desc"
          }
        },
?       student?: true,
?       mentor?: true,
?       institution?: true,
?       posts?: true,
?       userLanguages?: true,
?       userHobbies?: true,
?       careerGoals?: true,
?       moodBoard?: true,
?       customBadges?: true,
?       sentConnections?: true,
?       receivedConnections?: true,
?       connections1?: true,
?       connections2?: true,
?       givenEndorsements?: true,
?       receivedEndorsements?: true,
?       createdCircles?: true,
?       circleMemberships?: true,
?       sentCircleInvitations?: true,
?       receivedCircleInvitations?: true,
?       achievements?: true,
?       parent?: true
      }
    },
    educationHistory: {
      include: {
        institutionType: {
          include: {
            category: true
          }
        }
      },
      orderBy: {
        startDate: "desc"
      }
    }
  }
}

Unknown field `userAchievements` for include statement on model `Profile`. Available options are listed in green.
file:///home/runner/workspace/node_modules/.pnpm/@prisma+client@6.8.2_prisma@6.8.2_typescript@5.0.2__typescript@5.0.2/node_modules/@prisma/client/runtime/library.js: Invalid source map. Only conformant source maps can be used to find the original code. Cause: TypeError [ERR_INVALID_ARG_TYPE]: The "payload" argument must be of type object. Received null
file:///home/runner/workspace/node_modules/.pnpm/@prisma+client@6.8.2_prisma@6.8.2_typescript@5.0.2__typescript@5.0.2/node_modules/@prisma/client/runtime/library.js: Invalid source map. Only conformant source maps can be used to find the original code. Cause: TypeError [ERR_INVALID_ARG_TYPE]: The "payload" argument must be of type object. Received null
file:///home/runner/workspace/node_modules/.pnpm/@prisma+client@6.8.2_prisma@6.8.2_typescript@5.0.2__typescript@5.0.2/node_modules/@prisma/client/runtime/library.js: Invalid source map. Only conformant source maps can be used to find the original code. Cause: TypeError [ERR_INVALID_ARG_TYPE]: The "payload" argument must be of type object. Received null
file:///home/runner/workspace/node_modules/.pnpm/@prisma+client@6.8.2_prisma@6.8.2_typescript@5.0.2__typescript@5.0.2/node_modules/@prisma/client/runtime/library.js: Invalid source map. Only conformant source maps can be used to find the original code. Cause: TypeError [ERR_INVALID_ARG_TYPE]: The "payload" argument must be of type object. Received null
file:///home/runner/workspace/node_modules/.pnpm/@prisma+client@6.8.2_prisma@6.8.2_typescript@5.0.2__typescript@5.0.2/node_modules/@prisma/client/runtime/library.js: Invalid source map. Only conformant source maps can be used to find the original code. Cause: TypeError [ERR_INVALID_ARG_TYPE]: The "payload" argument must be of type object. Received null
Error fetching child profile: Error [PrismaClientValidationError]: 
Invalid `prisma.studentProfile.findUnique()` invocation:

{
  where: {
    id: "c2b57ac7-cd91-46d6-abb4-7c936c64308c"
  },
  include: {
    profile: {
      include: {
        userInterests: {
          include: {
            interest: {
              include: {
                category: true
              }
            }
          }
        },
        userSkills: {
          include: {
            skill: {
              include: {
                category: true
              }
            }
          }
        },
        socialLinks: true,
        goals: {
          orderBy: {
            createdAt: "desc"
          }
        },
        userAchievements: {
        ~~~~~~~~~~~~~~~~
          include: {
            achievementType: {
              include: {
                category: true
              }
            }
          },
          orderBy: {
            dateOfAchievement: "desc"
          }
        },
?       student?: true,
?       mentor?: true,
?       institution?: true,
?       posts?: true,
?       userLanguages?: true,
?       userHobbies?: true,
?       careerGoals?: true,
?       moodBoard?: true,
?       customBadges?: true,
?       sentConnections?: true,
?       receivedConnections?: true,
?       connections1?: true,
?       connections2?: true,
?       givenEndorsements?: true,
?       receivedEndorsements?: true,
?       createdCircles?: true,
?       circleMemberships?: true,
?       sentCircleInvitations?: true,
?       receivedCircleInvitations?: true,
?       achievements?: true,
?       parent?: true
      }
    },
    educationHistory: {
      include: {
        institutionType: {
          include: {
            category: true
          }
        }
      },
      orderBy: {
        startDate: "desc"
      }
    }
  }
}

Unknown field `userAchievements` for include statement on model `Profile`. Available options are listed in green.
    at async GET (app/api/parent/child-profile/[id]/route.ts:60:25)
  58 |
  59 |     // Fetch complete child profile data using service role key
> 60 |     const childProfile = await prisma.studentProfile.findUnique({
     |                         ^
  61 |       where: { id: childId },
  62 |       include: {
  63 |         profile: { {
  clientVersion: '6.8.2'
}
 GET /api/parent/child-profile/c2b57ac7-cd91-46d6-abb4-7c936c64308c 500 in 168ms
