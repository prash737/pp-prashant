  firstName: true,
        lastName: true,
        profileImageUrl: true,
        role: true
      }
    }
  }
}

Unknown argument `senderId`. Available options are listed in green.
file:///home/runner/workspace/node_modules/.pnpm/@prisma+client@6.8.2_prisma@6.8.2_typescript@5.0.2__typescript@5.0.2/node_modules/@prisma/client/runtime/library.js: Invalid source map. Only conformant source maps can be used to find the original code. Cause: TypeError [ERR_INVALID_ARG_TYPE]: The "payload" argument must be of type object. Received null
file:///home/runner/workspace/node_modules/.pnpm/@prisma+client@6.8.2_prisma@6.8.2_typescript@5.0.2__typescript@5.0.2/node_modules/@prisma/client/runtime/library.js: Invalid source map. Only conformant source maps can be used to find the original code. Cause: TypeError [ERR_INVALID_ARG_TYPE]: The "payload" argument must be of type object. Received null
file:///home/runner/workspace/node_modules/.pnpm/@prisma+client@6.8.2_prisma@6.8.2_typescript@5.0.2__typescript@5.0.2/node_modules/@prisma/client/runtime/library.js: Invalid source map. Only conformant source maps can be used to find the original code. Cause: TypeError [ERR_INVALID_ARG_TYPE]: The "payload" argument must be of type object. Received null
file:///home/runner/workspace/node_modules/.pnpm/@prisma+client@6.8.2_prisma@6.8.2_typescript@5.0.2__typescript@5.0.2/node_modules/@prisma/client/runtime/library.js: Invalid source map. Only conformant source maps can be used to find the original code. Cause: TypeError [ERR_INVALID_ARG_TYPE]: The "payload" argument must be of type object. Received null
file:///home/runner/workspace/node_modules/.pnpm/@prisma+client@6.8.2_prisma@6.8.2_typescript@5.0.2__typescript@5.0.2/node_modules/@prisma/client/runtime/library.js: Invalid source map. Only conformant source maps can be used to find the original code. Cause: TypeError [ERR_INVALID_ARG_TYPE]: The "payload" argument must be of type object. Received null
Error fetching additional profile data: Error [PrismaClientValidationError]: 
Invalid `prisma.connection.findMany()` invocation:

{
  where: {
    senderId: "006a3d59-ec4d-42e6-aee4-d04f1d0caf2b",
    ~~~~~~~~
    status: "pending",
?   AND?: ConnectionWhereInput | ConnectionWhereInput[],
?   OR?: ConnectionWhereInput[],
?   NOT?: ConnectionWhereInput | ConnectionWhereInput[],
?   id?: UuidFilter | String,
?   user1Id?: UuidFilter | String,
?   user2Id?: UuidFilter | String,
?   connectionType?: StringFilter | String,
?   connectedAt?: DateTimeFilter | DateTime,
?   user1?: ProfileScalarRelationFilter | ProfileWhereInput,
?   user2?: ProfileScalarRelationFilter | ProfileWhereInput
  },
  include: {
    receiver: {
      select: {
        id: true,
        firstName: true,
        lastName: true,
        profileImageUrl: true,
        role: true
      }
    }
  }
}

Unknown argument `senderId`. Available options are listed in green.
    at async GET (app/api/student/profile/[id]/route.ts:552:29)
  550 |       if (user.id === resolvedParams.id) {
  551 |         // Fetch sent connection requests
> 552 |         const sentRequests = await prisma.connection.findMany({
      |                             ^
  553 |           where: {
  554 |             senderId: user.id,
  555 |             status: 'pending' {
  clientVersion: '6.8.2'
}