
"use client"

import { useState, useEffect } from "react"
import Image from "next/image"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Camera, Plus, Trash2, Save } from "lucide-react"
import { useToast } from "@/hooks/use-toast"

interface GalleryItem {
  id?: string
  tempId?: number
  imageUrl: string
  caption: string
}

interface GallerySectionProps {
  institutionId: string
  onSave?: (items: GalleryItem[]) => void
}

export default function GallerySection({ institutionId, onSave }: GallerySectionProps) {
  const { toast } = useToast()
  
  // Gallery handlers
  const [existingGallery, setExistingGallery] = useState<any[]>([])
  const [newGalleryItems, setNewGalleryItems] = useState<any[]>([])
  const [isLoadingGallery, setIsLoadingGallery] = useState(false)
  const [isLoading, setIsLoading] = useState(false)

  useEffect(() => {
    if (institutionId) {
      // Fetch existing gallery
      fetchGallery()
    }
  }, [institutionId])

  const fetchGallery = async () => {
    try {
      setIsLoadingGallery(true)
      const response = await fetch(`/api/institution/gallery?institutionId=${institutionId}`)
      if (response.ok) {
        const data = await response.json()
        if (data.images && data.images.length > 0) {
          setExistingGallery(data.images)
        }
      }
    } catch (error) {
      console.error('Error fetching gallery:', error)
    } finally {
      setIsLoadingGallery(false)
    }
  }

  const addGalleryItem = () => {
    const newItem = {
      tempId: Date.now(),
      imageUrl: '',
      caption: ''
    }
    setNewGalleryItems(prev => [...prev, newItem])
  }

  const removeNewGalleryItem = (tempId: number) => {
    setNewGalleryItems(prev => prev.filter(item => item.tempId !== tempId))
  }

  const updateNewGalleryItem = (tempId: number, field: string, value: string) => {
    setNewGalleryItems(prev => prev.map(item => 
      item.tempId === tempId 
        ? { ...item, [field]: value }
        : item
    ))
  }

  const handleGalleryImageUpload = async (e: React.ChangeEvent<HTMLInputElement>, tempId: number) => {
    const file = e.target.files?.[0]
    if (file) {
      try {
        // Create immediate preview URL
        const previewUrl = URL.createObjectURL(file)
        updateNewGalleryItem(tempId, 'imageUrl', previewUrl)

        // Upload to server
        const uploadData = new FormData()
        uploadData.append('file', file)

        const response = await fetch('/api/upload/institution-gallery', {
          method: 'POST',
          body: uploadData
        })

        if (response.ok) {
          const data = await response.json()
          // Clean up the preview URL
          URL.revokeObjectURL(previewUrl)
          
          // Update with server URL
          updateNewGalleryItem(tempId, 'imageUrl', data.url)
          
          toast({
            title: "Success",
            description: "Image uploaded successfully!",
          })
        } else {
          console.error('Failed to upload gallery image')
          // Clean up the preview URL on error
          URL.revokeObjectURL(previewUrl)
          // Reset to empty
          updateNewGalleryItem(tempId, 'imageUrl', '')
          
          toast({
            title: "Error",
            description: "Failed to upload gallery image. Please try again.",
            variant: "destructive",
          })
        }
      } catch (error) {
        console.error('Error uploading gallery image:', error)
        toast({
          title: "Error",
          description: "Failed to upload gallery image. Please try again.",
          variant: "destructive",
        })
      }
    }

    // Clear the input value to allow re-uploading the same file
    e.target.value = ''
  }

  const handleSaveGallery = async () => {
    setIsLoading(true)
    try {
      const validGalleryItems = newGalleryItems.filter(item =>
        item.imageUrl.trim() !== '' &&
        item.caption.trim() !== ''
      )

      if (validGalleryItems.length === 0) {
        toast({
          title: "Info",
          description: "Please upload images and add captions before saving.",
        })
        setIsLoading(false)
        return
      }

      const response = await fetch('/api/institution/gallery', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          images: validGalleryItems.map(item => ({
            url: item.imageUrl,
            caption: item.caption
          }))
        }),
      })

      if (!response.ok) {
        throw new Error('Failed to save gallery items')
      }

      toast({
        title: "Success",
        description: "Gallery items saved successfully!",
      })

      // Clear new items and refresh existing
      setNewGalleryItems([])
      await fetchGallery()
      
      // Call onSave callback if provided
      if (onSave) {
        onSave([...existingGallery, ...validGalleryItems])
      }
    } catch (error) {
      console.error('Error saving gallery items:', error)
      toast({
        title: "Error",
        description: "Failed to save gallery items. Please try again.",
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>Gallery</CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        {isLoadingGallery ? (
          <div className="text-center py-8">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
            <p className="text-gray-500 mt-4">Loading gallery...</p>
          </div>
        ) : (
          <>
            {/* Existing Gallery Images */}
            {existingGallery.length > 0 && (
              <div className="space-y-4">
                <h3 className="text-lg font-semibold text-gray-900">Existing Gallery</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {existingGallery.map((item) => (
                    <div key={item.id} className="group relative rounded-lg overflow-hidden border border-gray-200">
                      <img 
                        src={item.imageUrl} 
                        alt={item.caption || "Gallery image"} 
                        className="w-full h-48 object-cover" 
                      />
                      <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-30 transition-all duration-200">
                        <Button
                          variant="destructive"
                          size="icon"
                          onClick={async () => {
                            try {
                              const response = await fetch(`/api/institution/gallery?imageId=${item.id}`, {
                                method: 'DELETE'
                              })
                              if (response.ok) {
                                toast({
                                  title: "Success",
                                  description: "Image deleted successfully!",
                                })
                                fetchGallery() // Refresh gallery
                              }
                            } catch (error) {
                              toast({
                                title: "Error",
                                description: "Failed to delete image.",
                                variant: "destructive",
                              })
                            }
                          }}
                          className="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity"
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                      <div className="p-2 bg-white">
                        <p className="text-sm text-gray-700 truncate">{item.caption || "No caption"}</p>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* New Gallery Items */}
            {newGalleryItems.length > 0 && (
              <div className="space-y-4">
                <h3 className="text-lg font-semibold text-gray-900">New Gallery Items</h3>
                {newGalleryItems.map((item, index) => (
                  <div key={item.tempId} className="p-4 border rounded-lg space-y-4">
                    <div className="flex justify-between items-center">
                      <h4 className="font-medium">New Gallery Item {index + 1}</h4>
                      <Button
                        type="button"
                        variant="outline"
                        size="sm"
                        onClick={() => removeNewGalleryItem(item.tempId)}
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <Label>Gallery Image</Label>
                        <div
                          className="w-full h-48 rounded-lg bg-gray-200 dark:bg-gray-700 flex items-center justify-center overflow-hidden border-2 border-dashed border-gray-300 hover:border-blue-400 transition-colors cursor-pointer"
                          onClick={() => {
                            const input = document.createElement('input')
                            input.type = 'file'
                            input.accept = 'image/*'
                            input.onchange = (e) => handleGalleryImageUpload(e as any, item.tempId)
                            input.click()
                          }}
                        >
                          {item.imageUrl ? (
                            <img
                              src={item.imageUrl}
                              alt="Gallery preview"
                              className="w-full h-full object-cover"
                            />
                          ) : (
                            <div className="text-center">
                              <Camera className="h-8 w-8 text-gray-400 mx-auto mb-2" />
                              <p className="text-sm text-gray-500">Click to upload image</p>
                            </div>
                          )}
                        </div>
                        <p className="text-xs text-gray-500">Recommended: JPG, PNG up to 5MB</p>
                      </div>

                      <div className="space-y-2">
                        <Label>Caption</Label>
                        <Textarea
                          value={item.caption}
                          onChange={(e) => updateNewGalleryItem(item.tempId, 'caption', e.target.value)}
                          placeholder="Describe this image"
                          className="min-h-[120px]"
                        />
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}

            {/* Add New Gallery Item Button */}
            <div className="pt-4 border-t">
              <Button
                type="button"
                variant="outline"
                onClick={addGalleryItem}
                className="w-full"
              >
                <Plus className="h-4 w-4 mr-2" />
                Add Gallery Item
              </Button>
            </div>

            {/* Save New Gallery Items Button */}
            {newGalleryItems.length > 0 && (
              <div className="flex justify-end pt-4 border-t">
                <Button
                  onClick={handleSaveGallery}
                  disabled={isLoading || newGalleryItems.some(item => !item.imageUrl.trim() || !item.caption.trim())}
                  className="bg-blue-600 hover:bg-blue-700 text-white"
                >
                  <Save className="h-4 w-4 mr-2" />
                  {isLoading ? 'Saving...' : 'Save Gallery Items'}
                </Button>
              </div>
            )}
          </>
        )}
      </CardContent>
    </Card>
  )
}
